version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dbackup-postgres
    environment:
      POSTGRES_DB: dbackup
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - dbackup-network

  # Redis for job queue and caching
  redis:
    image: redis:alpine
    container_name: dbackup-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dbackup-network

  # Go Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: dbackup-api
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/dbackup?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
      - ENCRYPTION_MASTER_KEY=dev-master-key-32-chars-long1234
      - GO_ENV=development
      - PORT=8080
      - LOG_LEVEL=debug
    ports:
      - "8080:8080"
      - "2345:2345" # Debug port
    volumes:
      - .:/app
      - go_mod_cache:/go/pkg/mod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - dbackup-network
    restart: unless-stopped

  # MinIO for S3-compatible object storage (development)
  minio:
    image: minio/minio:latest
    container_name: dbackup-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_DOMAIN: minio
    ports:
      - "9000:9000"
      - "9001:9001" # Console port
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dbackup-network

  # MySQL database for testing MySQL backup functionality
  mysql:
    image: mysql:8.0
    container_name: dbackup-mysql-test
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: testdb
      MYSQL_USER: testuser
      MYSQL_PASSWORD: testpass
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init-mysql.sql:/docker-entrypoint-initdb.d/init-mysql.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - dbackup-network

  # Adminer for database administration
  adminer:
    image: adminer:latest
    container_name: dbackup-adminer
    ports:
      - "8081:8080"
    depends_on:
      - postgres
      - mysql
    networks:
      - dbackup-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres

  # Redis Commander for Redis administration
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: dbackup-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8082:8081"
    depends_on:
      - redis
    networks:
      - dbackup-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  mysql_data:
    driver: local
  go_mod_cache:
    driver: local

networks:
  dbackup-network:
    driver: bridge